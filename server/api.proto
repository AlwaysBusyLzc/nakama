// Copyright 2017 The Nakama Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * Nakama Protocol Buffers API
 *
 * This file describes the API used to communicate messages from Nakama Clients to the server.
 *
 * Author: The Nakama Authors
 */

syntax = "proto3";
package server;

option csharp_namespace = "Nakama";

/**
 * Heartbeat message used as server ping to check for client liveliness.
 * This is separate to any other protocol-level ping (e.g. Websocket PING)
 */
message Heartbeat {
  /// Server UTC timestamp in milliseconds.
  int64 timestamp = 1;
}

/**
 * An error that has occured on the server.
 * The error could be result of bad input, or unexpected system error.
 * Check Error Code for more info.
 */
message Error {
  /// Predefined errors that are produced by the server.
  enum Code {
    RUNTIME_EXCEPTION = 0; /// An unexpected error that is unrecoverable.
    UNRECOGNIZED_PAYLOAD = 1; /// Server received a message that is not recognized.
    MISSING_PAYLOAD = 2; /// Server received an Envelop message but the internal message is unrecognised. Most likely a protocol mismatch.
    BAD_INPUT = 3; /// The message did not include the required data in the correct format.
    AUTH_ERROR = 4; /// Authentication failure
    USER_LINK_INUSE = 5; /// Linking operation failed because link exists
    USER_LINK_PROVIDER_UNAVAILABLE = 6; /// Linking operation failed because third-party service was unreachable.
    USER_UNLINK_DISALLOWED = 7; /// Unlinking operation failed because you cannot unlink last ID.
    USER_HANDLE_INUSE = 8; /// Handle is in-use by another user.
    GROUP_NAME_INUSE = 9; /// Group names must be unique and it's already in use.
    STORAGE_REJECTED = 10; /// Storage write operation failed
    MATCH_NOT_FOUND = 11; /// Match with given ID was not found in the system.
    RUNTIME_FUNCTION_NOT_FOUND = 12; /// Runtime function name was not found in system registry.
    RUNTIME_FUNCTION_EXCEPTION = 13; /// Runtime function caused an internal server error and did not complete.
  }

  int32 code = 1; /// Error code - must be one of the Error.Code enums above
  string message = 2; /// Specific error message
}

/**
 * Authentication message used to register or login a user and generate a token
 *
 * Returns AuthenticateResponse
 */
message AuthenticateRequest {
  /**
   * Email-based authentication
   */
  message Email {
    string email = 1; /// Email address
    string password = 2; /// Password
  }

  /**
   * GameCenter authentication
   *
   * https://developer.apple.com/documentation/gamekit/gklocalplayer/1515407-generateidentityverificationsign
   */
  message GameCenter {
    string player_id = 1; /// PlayerID generated by GameCenter
    string bundle_id = 2; /// BundleID generated by GameCenter
    int64 timestamp = 3; /// The date and time that the signature was created.
    string salt = 4; /// A random NSString used to compute the hash and keep it randomized.
    string signature = 5; /// The verification signature data generated.
    string public_key_url = 6; /// The URL for the public encryption key.
  }

  string collationId = 1; /// Optional collationID to track server response.

  /// OneOf authentication methods.
  oneof payload {
    Email email = 2; /// Email address and password
    string facebook = 3; /// Facebook OAuth Access Token
    string google = 4; /// Google OAuth Access Token
    GameCenter game_center = 5; /// GameCenter Authentication
    string steam = 6; /// Steam Token
    string device = 7; /// Device ID authentication
    string custom = 8; /// Custom ID authentication
  }
}

/**
 * Authentication message wrapper containing either a AuthenticateResponse.Session or AuthenticateResponse.Error
 */
message AuthenticateResponse {
  /**
   * Authentication Session
   */
  message Session {
    string token = 1; /// Authentication Token
  }

  /**
   * Authentication Error
   */
  message Error {
    int32 code = 1; /// Error code - this will be the same as the global error codes
    string message = 2; /// Specific error message
    AuthenticateRequest request = 3; /// Original request that caused this error
  }

  string collation_id = 1; /// Optional collationID to track server response.

  /// OneOf authentication response.
  oneof payload {
    Session session = 2; /// Authentication session
    Error error = 3; /// Authentication error
  }
}

/**
 * Main message wrapper containing either a Payload and an optional Collation ID to track server responses.
 */
message Envelope {
  reserved 58; //TLeaderboardRecord

  string collation_id = 1; /// Optional collationID to track server response.
  oneof payload {
    Error error = 2;

    Heartbeat heartbeat = 3;

    Logout logout = 4;
    TLink link = 5;
    TUnlink unlink = 6;

    TSelfFetch self_fetch = 7;
    TSelfUpdate self_update = 8;
    TUsersFetch users_fetch = 9;
    TSelf self = 10;
    TUsers users = 11;

    TFriendsAdd friends_add = 12;
    TFriendsRemove friends_remove = 13;
    TFriendsBlock friends_block = 14;
    TFriendsList friends_list = 15;
    TFriends friends = 16;

    TGroupsCreate groups_create = 17;
    TGroupsUpdate groups_update = 18;
    TGroupsRemove groups_remove = 19;
    TGroupsFetch groups_fetch = 20;
    TGroupsList groups_list = 21;
    TGroupsSelfList groups_self_list = 22;
    TGroupUsersList group_users_list = 23;
    TGroupsJoin groups_join = 24;
    TGroupsLeave groups_leave = 25;
    TGroupUsersAdd group_users_add = 26;
    TGroupUsersKick group_users_kick = 27;
    TGroupUsersPromote group_users_promote = 28;
    TGroup group = 29;
    TGroups groups = 30;
    TGroupUsers group_users = 31;

    TTopicJoin topic_join = 32;
    TTopicLeave topic_leave = 33;
    TTopicMessageSend topic_message_send = 34;
    TTopicMessagesList topic_messages_list = 35;
    TTopic topic = 36;
    TTopicMessageAck topic_message_ack = 37;
    TopicMessage topic_message = 38;
    TTopicMessages topic_messages = 39;
    TopicPresence topic_presence = 40;

    TMatchCreate match_create = 41;
    TMatchJoin match_join = 42;
    TMatchLeave match_leave = 43;
    MatchDataSend match_data_send = 44;
    TMatch match = 45;
    MatchData match_data = 46;
    MatchPresence match_presence = 47;

    TStorageFetch storage_fetch = 48;
    TStorageWrite storage_write = 49;
    TStorageRemove storage_remove = 50;
    TStorageData storage_data = 51;
    TStorageKey storage_key = 52;

    TLeaderboardsList leaderboards_list = 53;
    TLeaderboardRecordsWrite leaderboard_records_write = 54;
    TLeaderboardRecordsFetch leaderboard_records_fetch = 55;
    TLeaderboardRecordsList leaderboard_records_list = 56;
    TLeaderboards leaderboards = 57;
    TLeaderboardRecord leaderboard_record = 58;
    TLeaderboardRecords leaderboard_records = 59;

    TMatchmakeAdd matchmake_add = 60;
    TMatchmakeRemove matchmake_remove = 61;
    TMatchmakeTicket matchmake_ticket = 62;
    MatchmakeMatched matchmake_matched = 63;

    TRpc rpc = 64;
  }
}

message Logout {}

// Link expects same input as an authentication.
message TLink {
  oneof payload {
    AuthenticateRequest.Email email = 1;
    string facebook = 2;
    string google = 3;
    AuthenticateRequest.GameCenter game_center = 4;
    string steam = 5;
    string device = 6;
    string custom = 7;
  }
}

// Unlink allows direct IDs, no tokens needed.
message TUnlink {
  oneof payload {
    string email = 1;
    string facebook = 2;
    string google = 3;
    string game_center = 4;
    string steam = 5;
    string device = 6;
    string custom = 7;
  }
}

message User {
  bytes id = 1;
  string handle = 2;
  string fullname = 3;
  string avatar_url = 4;
  string lang = 5;
  string location = 6;
  string timezone = 7;
  bytes metadata = 8;
  int64 created_at = 9;
  int64 updated_at = 10;
  int64 last_online_at = 11;
}

message Self {
  User user = 1;
  bool verified = 2;
  string email = 3;
  repeated string device_ids = 4;
  string facebook_id = 5;
  string google_id = 6;
  string gamecenter_id = 7;
  string steam_id = 8;
  string custom_id = 9;
}

message TSelfFetch {}
message TSelf {
  Self self = 1;
}

message TSelfUpdate {
  string handle = 1;
  string fullname = 2;
  string timezone = 3;
  string location = 4;
  string lang = 5;
  bytes metadata = 6;
  string avatar_url = 7;
}

message TUsersFetch {
  message UsersFetch {
    oneof set {
      bytes user_id = 1;
      string handle = 2;
    }
  }

  repeated UsersFetch users = 1;
}
message TUsers {
  repeated User users = 1;
}

message Friend {
  User user = 1;
  int64 type = 2;
}

message TFriendsAdd {
  message FriendsAdd {
    oneof set {
      bytes user_id = 1;
      string handle = 2;
    }
  }

  repeated FriendsAdd friends = 1;
}

message TFriendsRemove {
  repeated bytes user_ids = 1;
}

message TFriendsBlock {
  repeated bytes user_ids = 1;
}

message TFriendsList {}
message TFriends {
  repeated Friend friends = 1;
}

message Group {
  bytes id = 1;
  bool private = 2;
  bytes creator_id = 3;
  string name = 4;
  string description = 5;
  string avatar_url = 6;
  string lang = 7;
  int64 utc_offset_ms = 8;
  bytes metadata = 9;
  int64 count = 10;
  int64 created_at = 11;
  int64 updated_at = 12;
}

message TGroupsCreate {
  message GroupsCreate {
    string name = 1;
    string description = 2;
    string avatar_url = 3;
    string lang = 4;
    bytes metadata = 5;
    bool private = 6;
  }
  repeated GroupsCreate groups = 1;
}
message TGroup {
  Group group = 1;
}

message TGroupsUpdate {
  message GroupsUpdate {
    bytes group_id = 1;
    bool private = 2;
    string name = 3;
    string description = 4;
    string avatar_url = 5;
    string lang = 6;
    bytes metadata = 7;
  }

  repeated GroupsUpdate groups = 1;
}

message TGroupsRemove {
  repeated bytes group_ids = 1;
}

message TGroupsSelfList {}
message TGroupsFetch {
  message GroupsFetch {
    oneof set {
      bytes group_id = 1;
      string name = 2;
    }
  }

  repeated GroupsFetch groups = 1;
}
message TGroupsList {
  int64 page_limit = 1;
  bool order_by_asc = 2;
  oneof filter {
    string lang = 3; // >= for lang variations
    int64 created_at = 4; // >= after the given time
    int64 count = 5; // up to max count, <= anything less than or equal to given count
  }
  bytes cursor = 7; // gob(%{struct(int64/string, int64, bytes)})
}
message TGroups {
  repeated Group groups = 1;
  bytes cursor = 2;
}

message GroupUser {
  User user = 1;
  int64 type = 2;
}

message TGroupUsersList {
  bytes group_id = 1;
}
message TGroupUsers {
  repeated GroupUser users = 1;
}

message TGroupsJoin {
  repeated bytes group_ids = 1;
}

message TGroupsLeave {
  repeated bytes group_ids = 1;
}

message TGroupUsersAdd {
  message GroupUserAdd {
    bytes group_id = 1;
    bytes user_id = 2;
  }

  repeated GroupUsersAdd group_users = 1;
}

message TGroupUsersKick {
  message GroupUsersKick {
    bytes group_id = 1;
    bytes user_id = 2;
  }
  repeated GroupUsersKick group_users = 1;
}

message TGroupUsersPromote {
  message GroupUsersPromote {
    bytes group_id = 1;
    bytes user_id = 2;
  }
  repeated GroupUsersPromote group_users = 1;
}

message TopicId {
  oneof id {
    bytes dm = 1;
    bytes room = 2;
    bytes group_id = 3;
  }
}

message UserPresence {
  bytes user_id = 1;
  bytes session_id = 2;
  string handle = 3;
}

message TTopicJoin {
  oneof id {
    bytes user_id = 1;
    bytes room = 2;
    bytes group_id = 3;
  }
}
message TTopic {
  TopicId topic = 1;
  repeated UserPresence presences = 2;
  UserPresence self = 3;
}

message TTopicLeave {
  TopicId topic = 1;
}

message TTopicMessageSend {
  TopicId topic = 1;
  bytes data = 2;
}

message TTopicMessageAck {
  bytes message_id = 1;
  int64 created_at = 2;
  int64 expires_at = 3;
  string handle = 4;
}

message TopicMessage {
  TopicId topic = 1;
  bytes user_id = 2;
  bytes message_id = 3;
  int64 created_at = 4;
  int64 expires_at = 5;
  string handle = 6;
  int64 type = 7;
  bytes data = 8;
}

message TTopicMessagesList {
  oneof id {
    bytes user_id = 1;
    bytes room = 2;
    bytes group_id = 3;
  }
  bytes cursor = 4;
  bool forward = 5;
  int64 limit = 6;
}
message TTopicMessages {
  repeated TopicMessage messages = 1;
  bytes cursor = 2;
}

message TopicPresence {
  TopicId topic = 1;
  repeated UserPresence joins = 2;
  repeated UserPresence leaves = 3;
}

message TMatchmakeAdd {
  int64 requiredCount = 1;
}
message TMatchmakeTicket {
  bytes ticket = 1;
}
message TMatchmakeRemove {
  bytes ticket = 1;
}

message MatchmakeMatched {
  bytes ticket = 1;
  bytes token = 2;
  repeated UserPresence presences = 3;
  UserPresence self = 4;
}

message TMatchCreate {}
message TMatchJoin {
  oneof id {
    bytes match_id = 1;
    bytes token = 2;
  }
}
message TMatch {
  bytes match_id = 1;
  repeated UserPresence presences = 2;
  UserPresence self = 3;
}

message MatchDataSend {
  bytes match_id = 1;
  int64 op_code = 2;
  bytes data = 3;
  repeated UserPresence presences = 4;
}

message MatchData {
  bytes match_id = 1;
  UserPresence presence = 2;
  int64 op_code = 3;
  bytes data = 4;
}

message TMatchLeave {
  bytes match_id = 1;
}

message MatchPresence {
  bytes match_id = 1;
  repeated UserPresence joins = 2;
  repeated UserPresence leaves = 3;
}

enum StoragePermissionRead {
  NO_READ = 0;
  OWNER_READ = 1;
  PUBLIC_READ = 2;
}
enum StoragePermissionWrite {
  NO_WRITE = 0;
  OWNER_WRITE = 1;
}
message TStorageFetch {
  message StorageKey {
    string bucket = 1;
    string collection = 2;
    string record = 3;
    bytes user_id = 4;
  }
  repeated StorageKey keys = 1;
}
message TStorageData {
  message StorageData {
    string bucket = 1;
    string collection = 2;
    string record = 3;
    bytes user_id = 4;
    bytes value = 5;
    bytes version = 6;
    int32 permission_read = 7;
    int32 permission_write = 8;
    int64 created_at = 9;
    int64 updated_at = 10;
    int64 expires_at = 11;
  }

  repeated StorageData data = 1;
}

message TStorageWrite {
  message StorageData {
    string bucket = 1;
    string collection = 2;
    string record = 3;
    bytes value = 4;
    bytes version = 5; // if-match and if-none-match
    int32 permission_read = 6;
    int32 permission_write = 7;
  }

  repeated StorageData data = 3;
}
message TStorageKey {
  message StorageKey {
    string bucket = 1;
    string collection = 2;
    string record = 3;
    bytes version = 4;
  }

  repeated StorageKey keys = 1;
}

message TStorageRemove {
  message StorageKey {
    string bucket = 1;
    string collection = 2;
    string record = 3;
    bytes version = 4;
  }
  repeated StorageKey keys = 1;
}

message Leaderboard {
  bytes id = 1;
  bool authoritative = 2;
  int64 sort = 3;
  int64 count = 4;
  string reset_schedule = 5;
  bytes metadata = 6;
  bytes next_id = 7;
  bytes prev_id = 8;
}

message LeaderboardRecord {
  bytes leaderboard_id = 1;
  bytes owner_id = 2;
  string handle = 3;
  string lang = 4;
  string location = 5;
  string timezone = 6;
  int64 rank = 7;
  int64 score = 8;
  int64 num_score = 9;
  bytes metadata = 10;
  int64 ranked_at = 11;
  int64 updated_at = 12;
  int64 expires_at = 13;
}

message TLeaderboardsList {
  int64 limit = 1;
  bytes cursor = 2;
  repeated bytes filter_leaderboard_id = 3;
}
message TLeaderboards {
  repeated Leaderboard leaderboards = 1;
  bytes cursor = 2;
}

message TLeaderboardRecordsWrite {
  message LeaderboardRecordsWrite {
    bytes leaderboard_id = 1;
    oneof op {
      int64 incr = 2;
      int64 decr = 3;
      int64 set = 4;
      int64 best = 5;
    }
    string location = 6;
    string timezone = 7;
    bytes metadata = 8;
  }

  repeated LeaderboardRecordsWrite records = 1;
}

message TLeaderboardRecordsFetch {
  repeated bytes leaderboard_ids = 1;
  int64 limit = 2;
  bytes cursor = 3;
}
message TLeaderboardRecordsList {
  message Owners {
    repeated bytes owner_ids = 1;
  }

  bytes leaderboard_id = 1;
  oneof filter {
    bytes owner_id = 2; // "haystack" lookup
    Owners owner_ids = 3;
    string lang = 4;
    string location = 5;
    string timezone = 6;
  }
  int64 limit = 7;
  bytes cursor = 8;
}
message TLeaderboardRecords {
  repeated LeaderboardRecord records = 1;
  bytes cursor = 2;
}

message TRpc {
  string id = 1;
  bytes payload = 2;
}
